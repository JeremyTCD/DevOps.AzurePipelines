# Notes
# - Secret variables do not work for pull request builds, if we want to deploy from such builds, we need some other way to handle Git and Nuget personal access tokens

parameters:
  buildConfiguration: "Release"
  runInheritDoc: true
  runTests: true
  runCodeCoverage: true
  codecovKey: "$(codecovKey)"
  changelogPath: "CHANGELOG.md"
  versionHeaderPattern: '^##[ \t]*\[(\d+\.\d+\.\d+[0-9A-Za-z-.]*)\]'
  # TODO allow for multiple endpoints
  nugetRestoreEndpoint: "https://www.nuget.org/api/v2/package"
  nugetRestorePat: ""
  nugetPushEndpoint: "https://www.nuget.org/api/v2/package"
  nugetPushPat: "$(nugetPushPat)"
  nugetDistUrl: "https://dist.nuget.org/win-x86-commandline/v4.7.1/nuget.exe"
  githubPat: "$(githubPat)"

jobs:
# Build
- job: "Build"
  pool:
    vmImage: "vs2017-win2016"
  steps:
  - powershell: |
      function Render-Body { $input | foreach{@{value=$_}} | Format-Table -Property @{Expression={" "}},value -HideTableHeader -wrap}

      # Place cache in working directory so that it is uploaded to pipeline artifacts
      $env:NUGET_PACKAGES=$env:SYSTEM_DEFAULTWORKINGDIRECTORY + "/packages"

      if($env:NUGET_RESTORE_ENDPOINT){
        "Nuget restore endpoint specified...`n"

        "Installing Nuget:`n"
        Invoke-WebRequest $env:NUGET_DIST_URL -outfile nuget.exe | Render-Body
        "    Nuget v4.7.1 installed.`n"

        # Use File.WriteAllLines since Nuget errors out if file has "UTF8 with BOM" encoding
        "Generating empty NuGet.Config:`n"
        [IO.File]::WriteAllLines($env:SYSTEM_DEFAULTWORKINGDIRECTORY + "/NuGet.Config", '<?xml version="1.0" encoding="utf-8"?><configuration><packageSources><clear /></packageSources></configuration>')
        "    Empty NuGet.Config generated.`n"

        $sourceName = 'nugetRestoreEndpoint'
        if($env:NUGET_RESTORE_PAT){
          "Adding source with PAT:"          
          .\nuget.exe sources add -Name $sourceName -Source $env:NUGET_RESTORE_ENDPOINT -Username 'placeholder' -Password $env:NUGET_RESTORE_PAT -configfile '.\Nuget.Config' -StorePasswordInClearText | Render-Body
        }
        else {
          "Adding source:"
          .\nuget.exe sources add -Name $sourceName -Source $env:NUGET_RESTORE_ENDPOINT -configfile '.\Nuget.Config' | Render-Body
        }
      }

      "Restoring packages:"
      dotnet restore | Render-Body

      "Building solution:"
      dotnet build --no-restore --configuration Release -p:CopyLocalLockFileAssemblies=true | Render-Body

      if($env:RUN_INHERIT_DOC -eq 'true'){
        "Installing InheritDoc:"
        dotnet tool install InheritDocTool --tool-path . | Render-Body # Install to current dir https://github.com/dotnet/cli/issues/8368

        "Running InheritDoc:"
        .\InheritDoc.exe -b src -o | Render-Body

        # We won't be needing InheritDoc again in the pipeline
        remove-item .\InheritDoc.exe
        remove-item .\.store -recurse
      }
    displayName: "Build"
    env:
      NUGET_DIST_URL: ${{parameters.nugetDistUrl}}
      NUGET_RESTORE_ENDPOINT: ${{parameters.nugetRestoreEndpoint}}
      NUGET_RESTORE_PAT: ${{parameters.nugetRestorePat}}
      RUN_INHERIT_DOC: ${{parameters.runInheritDoc}}
  - template: "../shared/publish-working-directory.yml"
# Test
- ${{if eq(parameters.runTests, 'true')}}:
  - job: "WindowsTests"
    dependsOn: "Build"
    pool:
      vmImage: "vs2017-win2016"
    steps:
    # Skip checking out the default repository resource
    - checkout: "none"
    - template: "../shared/download-working-directory.yml"
    # Test and handle code coverage report
    - powershell: |
        function Render-Body { $input | foreach{@{value=$_}} | Format-Table -Property @{Expression={" "}},value -HideTableHeader -wrap}

        # Make sure dotnet knows to look for packages in ./packages
        $env:NUGET_PACKAGES=$env:SYSTEM_DEFAULTWORKINGDIRECTORY + "/packages"

        "Running tests:"
        dotnet test --no-build --no-restore --configuration Release --logger trx --results-directory $(Agent.TempDirectory) -p:CollectCoverage=$env:RUN_CODE_COVERAGE -p:CoverletOutputFormat=cobertura | Render-Body

        $reports = get-childitem coverage.cobertura.xml -Recurse | foreach{$_.fullname}
        # No reports
        if($reports.length -eq 0){
          "No code coverage reports generated..."
          exit
        }

        # Publish report to codecov
        "Publishing code coverage report(s)...`n"

        "Installing Codecov:"      
        choco install codecov --yes --no-progress --cache-location=. | Render-Body 

        "Publishing to Codecov:"
        codecov -f $reports -t "$env:CODECOV_KEY" --required | Render-Body # Exit code 1 if uploading of report fails, otherwise it may fail silently
      displayName: "Test"
      #TODO remove once parameters can be used directly in scripts
      env:
        CODECOV_KEY: ${{parameters.codecovKey}}
        RUN_CODE_COVERAGE: ${{parameters.runCodeCoverage}}
    - task: "PublishTestResults@2"
      inputs:
        testResultsFormat: "VSTest"
        testResultsFiles: "**/*.trx"
        searchFolder: "$(Agent.TempDirectory)"
        testRunTitle: "WindowsTests"
  - template: "../nuget/test.yml"
    parameters:
      name: "LinuxTests"
      vmImage: "ubuntu-16.04"
      buildConfiguration: ${{ parameters.buildConfiguration }}
  - template: "../nuget/test.yml"
    parameters:
      name: "macOSTests"
      vmImage: "macOS-10.13"
      buildConfiguration: ${{ parameters.buildConfiguration }}
# Deploy
- job: "Deploy"
  dependsOn:
  - ${{if eq(parameters.runTests, 'true')}}:
    - "WindowsTests"
    - "LinuxTests"
    - "macOSTests"
  - ${{if ne(parameters.runTests, 'true')}}:
    - "Build"
  steps:
  - checkout: "none"
  - template: "../shared/download-working-directory.yml"
  - template: "../shared/find-new-version.yml"
    parameters:
      changelogPath: ${{parameters.changelogPath}}
      versionHeaderPattern: ${{parameters.versionHeaderPattern}}
  - powershell: |
      function Render-Body { $input | foreach{@{value=$_}} | Format-Table -Property @{Expression={" "}},value -HideTableHeader -wrap}

      # Make sure dotnet knows to look for packages in ./packages
      $env:NUGET_PACKAGES=$env:SYSTEM_DEFAULTWORKINGDIRECTORY + "/packages"

      "Packing Nuget package(s):"
      dotnet pack --no-restore --no-build --configuration $env:BUILD_CONFIGURATION -p:PackageVersion=$env:VERSION | Render-Body

      # Push using endpoint and api key
      "Pushing packages:"
      $packages = get-childitem src *.nupkg -Recurse
      foreach($package in $packages) {
        $message = dotnet nuget push $package.fullname --source $env:NUGET_ENDPOINT --api-key $env:NUGET_PUSH_PAT
        $message | Render-body

        # 409 returned if a package with the provided ID and version already exists - https://docs.microsoft.com/en-us/nuget/api/package-publish-resource#push-a-package
        if($lastExitCode -ne 0{
          if($message -contains ' 409 '){
            # If error occurred because package already exists, allow pipeline to continue
            "$($package.fullname) already exists..."
          }else{
            throw "An unexpected error occurred while attempting to publish $package. If it was an intermittent issue, do a manual rebuild of the same commit ($env:BUILD_SOURCEVERSION). Otherwise, rectify the issue and merge the changes into master to trigger a CI build."
          }
        }
      }

      # If we get here, any failed publish attempts were because the package already exists
      exit 0
    displayName: "Push"
    condition: and(succeeded(), ne(variables['version'], ''))
    # TODO When template parameters can be used in scripts, remove this - https://github.com/Microsoft/azure-pipelines-agent/issues/1772
    env:
      BUILD_CONFIGURATION: ${{parameters.buildConfiguration}}
      NUGET_ENDPOINT: ${{parameters.nugetPushEndpoint}}
      NUGET_PUSH_PAT: ${{parameters.nugetPushPat}}
  - template: "../shared/tag-commit.yml"
    parameters:
      githubPat: ${{parameters.githubPat}}