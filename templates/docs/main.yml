parameters:
  nugetRestoreEndpoints: ""
  nugetRestorePats: ""
  nugetDistUrl: "https://dist.nuget.org/win-x86-commandline/v4.7.1/nuget.exe"
  netlifyPat: "$(netlifyPat)"
  docsDir: docs
jobs:
- job: "DocsBuild"
  pool:
    vmImage: "vs2017-win2016"
  steps:
  - powershell: |
      function Render-Body { $input | foreach{@{value=$_}} | Format-Table -Property @{Expression={" "}},value -HideTableHeader -wrap}

      # TODO We should only rebuild docs if files in the docs directory change since the last rebuild. 
      # We could keep track of when the last rebuild was made by tagging the commit. Tags show up in the 
      # release page of github though - https://github.community/t5/How-to-use-Git-and-GitHub/Tag-without-release/td-p/6255.
      if($env:BUILD_SOURCEBRANCHNAME -ne 'master'){
        "Pull request build, nothing to deploy"
        exit
      }
      "`nCommit is a merge commit into master...`n"
      write-host "##vso[task.setvariable variable=buildAndDeploy]true"
    displayName: "Check build and deploy required"
  - ${{if ne(parameters.nugetRestoreEndpoints, '')}}:
    - template: "../shared/install-nuget.yml"
      parameters:
        nugetDistUrl: ${{parameters.nugetDistUrl}}
    - template: "../shared/set-nuget-restore-endpoints.yml"
      parameters: 
        nugetRestoreEndpoints: ${{parameters.nugetRestoreEndpoints}}
        nugetRestorePats: ${{parameters.nugetRestorePats}}
  - powershell: |
      function Render-Body { $input | foreach{@{value=$_}} | Format-Table -Property @{Expression={" "}},value -HideTableHeader -wrap}

      cd ${{parameters.docsDir}}

      "Installing DocFx:`n"
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      Invoke-WebRequest https://github.com/JeremyTCD/docfx/releases/download/2.39.5/jering-docfx.zip -outfile "./jering-docfx.zip"
      if(-not($?)){
        throw "Failed to download DocFx."
      }

      Expand-Archive "./jering-docfx.zip"
      $env:Path += ";$pwd/jering-docfx/jering-docfx"
      "    DocFx installed.`n"

      "Installing Yarn:"      
      npm install yarn --save-dev | Render-Body
      if($lastExitCode -ne 0){
        throw "Failed to install Yarn."
      }
      remove-item package-lock.json

      "Installing Mimo:"
      .\node_modules\.bin\yarn install | Render-Body
      if($lastExitCode -ne 0){
        throw "Failed to install Mimo."
      }

      "Building site:"
      .\node_modules\.bin\yarn run build-production | Render-Body
      if($lastExitCode -ne 0){
        throw "Failed to build site."
      }

      # Netlify is more flexible than Github pages
      # - We aren't restricted to <custom domain>/<project name> for projects, e.g <custom domain>/products/<product name> is
      #   possible.
      # - Flexible redirects.
      "Installing Netlify:"
      .\node_modules\.bin\yarn add netlify-cli --save-dev | Render-Body
      if($lastExitCode -ne 0){
        throw "Failed to install Netlify."
      }
      
      "Publishing site:"
      .\node_modules\.bin\netlify deploy --prod --dir=bin/_site | Render-Body
      if($lastExitCode -ne 0){
        throw "Failed to deploy site to Netlify."
      }
    condition: and(succeeded(), eq(variables['buildAndDeploy'], 'true'))
    displayName: "Build and publish docs"
    env:
      NETLIFY_AUTH_TOKEN: ${{parameters.netlifyPat}}