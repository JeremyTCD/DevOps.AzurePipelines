# Notes
# - Secret variables do not work for pull request builds, if we want to deploy from such builds, we need some other way to handle Git and Nuget personal access tokens

parameters:
  nugetRestoreEndpoint: "https://www.nuget.org/api/v2/package"
  nugetRestorePat: ""
  nugetDistUrl: "https://dist.nuget.org/win-x86-commandline/v4.7.1/nuget.exe"

jobs:
# Build
- job: "Build"
  pool:
    vmImage: "vs2017-win2016"
  steps:
  - powershell: |
      function Render-Body { $input | foreach{@{value=$_}} | Format-Table -Property @{Expression={" "}},value -HideTableHeader -wrap}

      # TODO We should only rebuild docs if files in the docs directory change since the last rebuild. 
      # We could keep track of when the last rebuild was made by tagging the commit. Tags show up in the 
      # release page of github though - https://github.community/t5/How-to-use-Git-and-GitHub/Tag-without-release/td-p/6255.
      if($env:BUILD_SOURCEBRANCHNAME -ne 'master'){
        "Pull request build, nothing to deploy"
        exit
      }
      "`nCommit is a merge commit into master...`n"
      write-host "##vso[task.setvariable variable=buildAndDeploy]true"
      # TODO configurable directory
      cd docs
    displayName: "Check build and deploy required"
  - ${{if ne(parameters.nugetRestoreEndpoint, '')}}:
    - template: "../shared/set-nuget-restore-endpoint.yml"
      parameters: 
        nugetRestoreEndpoint: ${{parameters.nugetRestoreEndpoint}}
        nugetRestorePat: ${{parameters.nugetRestorePat}}
        nugetDistUrl: ${{parameters.nugetDistUrl}}
  - powershell: |
      "Installing DocFx:`n"
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      Invoke-WebRequest https://github.com/JeremyTCD/docfx/releases/download/2.39.3/jering-docfx.zip -outfile "./jering-docfx.zip"
      if($lastExitCode -ne 0){
        throw "An unexpected error occurred while installing DocFx. "
      }
      Expand-Archive "./jering-docfx.zip"
      $env:Path += ";$pwd/jering-docfx/jering-docfx"
      "    DocFx installed.`n"

      "Installing Yarn:"      
      npm install yarn --save-dev | Render-Body
      if($lastExitCode -ne 0){
        throw "An unexpected error occurred while installing Yarn. "
      }
      remove-item package-lock.json

      "Installing Mimo:"
      .\node_modules\.bin\yarn install | Render-Body
      if($lastExitCode -ne 0){
        throw "An unexpected error occurred while installing Mimo. "
      }

      "Building site:"
      .\node_modules\.bin\yarn run build-production | Render-Body
      if($lastExitCode -ne 0){
        throw "An unexpected error occurred while building the site. "
      }

      "Publishing site:"
    condition: and(succeeded(), eq(variables['buildAndDeploy'], 'true'))
    displayName: "Build and publish docs"