parameters:
  changelogPath: "CHANGELOG.md"
  versionHeaderPattern: '^##[ \t]*\[(\d+\.\d+\.\d+[0-9A-Za-z-.]*)\]'

# Outputs a job scoped variable named version if a new version is found
steps:
- powershell: |
    function Render-Body { $input | foreach{@{value=$_}} | Format-Table -Property @{Expression={" "}},value -HideTableHeader -wrap}

    # We've set triggers to commits to master and commits to branches with open pull requests 
    # to master. Only commits to master might have stuff to deploy.
    # TODO If we use $env:BUILD_REASON -eq 'PullRequest', do manual rebuilds cause deploys?
    if($env:BUILD_SOURCEBRANCHNAME -ne 'master'){
      "Pull request build, nothing to deploy"
      exit
    }
    "`nCommit is a merge commit into master...`n"

    # .git folder was named git so that PublishPipelineArtifact picked it up
    rename-item git .git
    
    # Initialize convenience variables
    $commit = $env:BUILD_SOURCEVERSION

    # TODO improve versioning
    # possible plan:
    # If current commit is tagged
    # - Assume we are re-running manually cause a push failed, pack and attempt to push again, fail only if unable to push 
    #   AND the reason isn't because packages already exist in the feed
    # If current commit isn't tagged, check what versions are listed in changelog
    # - If a listed version has no corresponding tag, tag and push packages
    # - If every listed version has a corresponding tag, don't do anything
    # think through tag before or after pushing, possibly tagging after pushing might be better


    # Check whether changelog has changed
    # Note: -m displays a diff of the parents of a merge commit
    $changedFiles = git show -m --pretty="" --name-only $commit
    "Changed files:"
    $changedFiles | Render-Body 
    if(-not($changedFiles -contains $env:CHANGELOG_PATH)) {
      "Changelog unchanged, nothing to deploy."
      exit
    }
    "Changelog has changed...`n"

    # Check whether changelog has a new version
    $addedLines = git diff --unified=0 $commit^ $commit -- $env:CHANGELOG_PATH | foreach{if($_[0] -eq '+'){$_.Substring(1)}}
    "Added Lines:"
    $addedLines | Render-Body

    foreach($addedLine in $addedLines) {
      if($addedLine -match $env:VERSION_HEADER_PATTERN){
        $newVersion = $matches[1]
        break
      }
    }
    if(-not($newVersion)) {
      "No new version."
      exit
    }
    "New version `"$newVersion`" found.`n"
    write-host "##vso[task.setvariable variable=version]$newVersion"
  displayName: "Changelog versioning"
  env:
    CHANGELOG_PATH: ${{parameters.changelogPath}}
    VERSION_HEADER_PATTERN: ${{parameters.versionHeaderPattern}}