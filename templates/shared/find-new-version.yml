parameters:
  changelogPath: ""
  releaseVersionHeaderPattern: ""
  unreleasedVersionHeaderPattern: ""
  findUnreleasedPrereleaseVersion: ""

# Outputs a job scoped variable named version if a new version is found
steps:
# TODO This script hit the character limit so variable names have been shortened - https://github.com/Microsoft/azure-pipelines-yaml/issues/59
# We've set triggers to commits to master/main and commits to branches with open pull requests 
# to master/main. Only commits to master/main might have stuff to deploy.
- powershell: |
    function R-B { $input | foreach{@{value=$_}} | Format-Table -Property @{Expression={" "}},value -HideTableHeader -wrap}
    $setVar="##vso[task.setvariable variable="

    if(($env:BUILD_SOURCEBRANCHNAME -ne 'master') -and ($env:BUILD_SOURCEBRANCHNAME -ne 'main')){
      "Pull request build, nothing to deploy"
      exit
    }
    "`nCommit is a merge commit into master/main. Finding new version...`n"

    # Find new version
    "Changelog release versions:"
    $findUnreleasedPrereleaseVersion = "${{parameters.findUnreleasedPrereleaseVersion}}"
    $rVs=get-content "${{parameters.changelogPath}}" | 
      foreach {
        if($_ -match "${{parameters.releaseVersionHeaderPattern}}"){$matches[1]}
        elseif (($findUnreleasedPrereleaseVersion -eq 'True') -and ($_ -match "${{parameters.unreleasedVersionHeaderPattern}}")){$uV=$matches[1]}
      }
    if(-not($?)){throw "Failed to read changelog."}
    $rVs | R-B
    
    "Changelog unreleased version:"
    if($findUnreleasedPrereleaseVersion -ne 'true'){"`n    Publishing of unreleased prereleases isn't enabled.`n"}
    elseif($uv){$uV | R-B}
    else{"`n    No unreleased version found.`n"}

    "Git tags:"
    $tags=git tag -l
    if($lastExitCode -ne 0){throw "Failed to retrieve existing Git tags."}
    $tags | R-B

    $newRV=$rVs | where{-not($tags -contains $_)}
    if($newRV -is [array]){throw "Multiple new release versions found, manual deployment required:`n$newRV"}
    elseif($newRV){
      "New release version `"$newRV`" found..."
      write-host ($setVar + "newVersion]$newRV")
      write-host ($setVar + "newVersionIsRelease]true")
    }
    elseif($uV){
      if($uV.Contains("-")){$newUV="$uV.$env:BUILD_BUILDNUMBER"} # Add build number to existing pre-release segment
      else{$newUV="$uV-$env:BUILD_BUILDNUMBER"} # Add build number as pre-release segment

      "New unreleased prerelease `"$newUV`" found..."
      write-host ($setVar + "newVersion]$newUV")
    }
    else{"No new version."}
  displayName: "Find new version"