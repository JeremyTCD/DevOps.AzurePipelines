parameters:
  changelogPath: ""
  releaseVersionHeaderPattern: ""
  unrVerHeaderPattern: ""

# Outputs a job scoped variable named version if a new version is found
steps:
# TODO This script hit the character limit so variable names have been shortened - https://github.com/Microsoft/azure-pipelines-yaml/issues/59
# We've set triggers to commits to master and commits to branches with open pull requests 
# to master. Only commits to master might have stuff to deploy.
- powershell: |
    function R-B { $input | foreach{@{value=$_}} | Format-Table -Property @{Expression={" "}},value -HideTableHeader -wrap}
    $vsoSetVar="##vso[task.setvariable variable="

    if($env:BUILD_SOURCEBRANCHNAME -ne 'master'){
      "Pull request build, nothing to deploy"
      exit
    }
    "`nCommit is a merge commit into master. Finding new version...`n"

    # Find new version
    "Changelog release versions:"
    $rVs=get-content "${{parameters.changelogPath}}" | 
      foreach {
        if($_ -match "${{parameters.releaseVersionHeaderPattern}}"){$matches[1]}
        elseif ($_ -match "${{parameters.unreleasedVersionHeaderPattern}}"){$uV=$matches[1]}
      }
    if(-not($?)){throw "Failed to read changelog."}
    $rVs | R-B
    
    "Changelog unreleased version:"
    $uV | R-B

    "Git tags:"
    $tags=git tag -l
    if($lastExitCode -ne 0){throw "Failed to retrieve existing Git tags."}
    $tags | R-B

    $newRVer=$rVs | where{-not($tags -contains $_)}
    # If there is only 1 string, powershell assigns a string with non-zero length to $newRVer
    if($newRVer -is [array]){throw "Multiple new release versions found, manual deployment required:`n$newRVer"}
    elseif($newRVer){
      "New release version `"$newRVer"` found..."
      write-host ($vsoSetVar + "newVersion]$newRVer")
      write-host ($vsoSetVar + "newVersionIsRelease]true")
    }
    elseif($uV){
      # Build number can be customized - https://docs.microsoft.com/en-us/azure/devops/pipelines/build/options?view=vsts&tabs=yaml
      if($uV.Contains("-")){$newCVer="$uV.$env:BUILD_BUILDNUMBER"} # Add build number to existing pre-release segment
      else{$newCVer="$uV-$env:BUILD_BUILDNUMBER"} # Add build number as pre-release segment

      "New CI version `"$newCVer"` found..."
      write-host ($vsoSetVar + "newVersion]$newCVer")
    }
    else{"No new version."}
  displayName: "Find new version"