parameters:
  changelogPath: ""
  releaseVersionHeaderPattern: ""
  unreleasedVersionHeaderPattern: ""

# Outputs a job scoped variable named version if a new version is found
steps:
- powershell: |
    function Render-Body { $input | foreach{@{value=$_}} | Format-Table -Property @{Expression={" "}},value -HideTableHeader -wrap}

    # We've set triggers to commits to master and commits to branches with open pull requests 
    # to master. Only commits to master might have stuff to deploy.
    # TODO If we use $env:BUILD_REASON -eq 'PullRequest', do manual rebuilds cause deploys?
    if($env:BUILD_SOURCEBRANCHNAME -ne 'master'){
      "Pull request build, nothing to deploy"
      exit
    }
    "`nCommit is a merge commit into master. Finding new version...`n"

    # Find new version
    "Changelog release versions:"
    $releaseVersions = get-content "${{parameters.changelogPath}}" | 
      foreach {
        if($_ -match "${{parameters.releaseVersionHeaderPattern}}"){
          $matches[1]
        }
        elseif ($_ -match "${{parameters.unreleasedVersionHeaderPattern}}"){
          $unreleasedVersion = $matches[1]
        }
      }
    if(-not($?)){
      throw "Failed to read changelog."
    }
    $releaseVersions | Render-Body
    
    "Changelog unreleased version:"
    $unreleasedVersion | Render-Body

    "Git tags:"
    $gitTags = git tag -l
    if($lastExitCode -ne 0){
      throw "Failed to retrieve existing Git tags."
    }
    $gitTags | Render-Body

    $newReleaseVersion = $releaseVersions | where{-not($gitTags -contains $_)}
    # If there is only 1 string, powershell assigns a string with non-zero length to $newReleaseVersion
    if($newReleaseVersion -is [array]){
      throw "Multiple new release versions found, manual deployment required:`n$newReleaseVersion"
    }
    elseif($newReleaseVersion){
      "New release version `"$newReleaseVersion"` found..."
      write-host "##vso[task.setvariable variable=newVersion]$newReleaseVersion"
      write-host "##vso[task.setvariable variable=newVersionIsRelease]true"
    }
    elseif($unreleasedVersion){
      # Build number can be customized - https://docs.microsoft.com/en-us/azure/devops/pipelines/build/options?view=vsts&tabs=yaml
      if($unreleasedVersion.Contains("-")){
        $newCiVersion = "$unreleasedVersion.$env:BUILD_BUILDNUMBER" # Add build number to existing pre-release segment
      }
      else{
        $newCiVersion = "$unreleasedVersion-$env:BUILD_BUILDNUMBER" # Add build number as pre-release segment
      }

      "New CI version `"$newCiVersion"` found..."
      write-host "##vso[task.setvariable variable=newVersion]$newCiVersion"
    }
    else{
      "No new version."
    }

  displayName: "Find new version"