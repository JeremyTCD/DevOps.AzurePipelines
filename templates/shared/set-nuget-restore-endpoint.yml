parameters:
  nugetRestoreEndpoint: ""
  nugetRestorePat: ""

steps:
- powershell: |
    function Render-Body { $input | foreach{@{value=$_}} | Format-Table -Property @{Expression={" "}},value -HideTableHeader -wrap}

    $nugetRestorePat = "${{parameters.nugetRestorePat}}"

    $configFilePath = $env:SYSTEM_DEFAULTWORKINGDIRECTORY + "/NuGet.Config"

    # Use File.WriteAllLines since Nuget errors out if file has "UTF8 with BOM" encoding
    "Generating empty NuGet.Config:`n"
    [IO.File]::WriteAllLines($configFilePath, '<?xml version="1.0" encoding="utf-8"?><configuration><packageSources><clear /></packageSources></configuration>')
    if(-not($?)){
      throw "Failed to create empty NuGet.Config."
    }
    "    Empty NuGet.Config generated.`n"

    $arguments = @("sources", "add", "-Name", "nugetRestoreEndpoint", "-Source", "${{parameters.nugetRestoreEndpoint}}", "-config", $configFilePath)
    if($nugetRestorePat){
      $arguments += @("-Username", "placeholder", "-Password", $nugetRestorePat, "-StorePasswordInClearText")
      "Adding source with PAT:"          
    }
    else { 
      "Adding source:"
    }
    .\nuget.exe $arguments | Render-Body
    if($lastExitCode -ne 0){
      throw "Failed to add source to NuGet.Config."
    }
  displayName: "Set Nuget restore endpoint"