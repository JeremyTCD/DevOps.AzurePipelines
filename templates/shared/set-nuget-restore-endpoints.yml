parameters:
  nugetRestoreEndpoints: ""
  nugetRestorePats: ""

steps:
- powershell: |
    function Render-Body { $input | foreach{@{value=$_}} | Format-Table -Property @{Expression={" "}},value -HideTableHeader -wrap}

    $nugetRestorePat = "${{parameters.nugetRestorePat}}"

    $configFilePath = $env:SYSTEM_DEFAULTWORKINGDIRECTORY + "/NuGet.Config"

    # Use File.WriteAllLines since Nuget errors out if file has "UTF8 with BOM" encoding
    "Generating empty NuGet.Config:`n"
    [IO.File]::WriteAllLines($configFilePath, '<?xml version="1.0" encoding="utf-8"?><configuration><packageSources><clear /></packageSources></configuration>')
    if(-not($?)){
      throw "Failed to create empty NuGet.Config."
    }
    "    Empty NuGet.Config generated.`n"

    $nugetRestoreEndpoints = "${{parameters.nugetRestoreEndpoints}}".Split(' ');
    $nugetRestorePats = "${{parameters.nugetRestorePats}}".Split(' ');

    for($i = 0; $i -lt $nugetRestoreEndpoints.Length; $i++){
      $endpoint = $nugetRestoreEndpoints[$i]
      if(!$endpoint){
        throw "Invalid nugetRestoreEndpoints. Ensure that each endpoint is separated by a single space."
      }
      $arguments = @("sources", "add", "-Name", "$endpoint", "-Source", "$endpoint", "-config", $configFilePath)
      if($nugetRestorePats[$i]){
        $arguments += @("-Username", "placeholder", "-Password", $nugetRestorePats[$i], "-StorePasswordInClearText")
        "Adding endpoint with PAT:"          
      }
      else { 
        "Adding endpoint:"
      }
      .\nuget.exe $arguments | Render-Body
      if($lastExitCode -ne 0){
        throw "Failed to add endpoint $endpoint to NuGet.Config."
      }
    }
  displayName: "Set Nuget restore endpoints"