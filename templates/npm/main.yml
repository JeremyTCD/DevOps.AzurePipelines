# Notes
# - Secret variables do not work for pull request builds, if we want to deploy from such builds, we need some other way to handle Git and Nuget personal access tokens

parameters:
  changelogPath: "CHANGELOG.md"
  versionHeaderPattern: '^##[ \t]*\[(\d+\.\d+\.\d+[0-9A-Za-z-.]*)\]'
  npmInstallEndpoint: "https://www.npm.org/api/v2/package"
  npmInstallPat: ""
  npmPublishEndpoint: "https://www.npm.org/api/v2/package"
  npmPublishPat: "$(npmPublishPat)"
  githubPat: "$(githubPat)"

jobs:
# Build
- job: "Build"
  pool:
    vmImage: "vs2017-win2016"
  steps:
  - template: set-npmrc.yml
    parameters:
      endpoint: ${{parameters.npmInstallEndpoint}}
      pat: ${{parameters.npmInstallPat}}
  - powershell: |
      function Render-Body { $input | foreach{@{value=$_}} | Format-Table -Property @{Expression={" "}},value -HideTableHeader -wrap}

      # Can't use chocolatey, the installation script errors out
      "Installing Yarn:"      
      npm install yarn --save-dev | Render-Body 
      remove-item package-lock.json

      "Restoring dependencies:"
      .\node_modules\.bin\yarn install | Render-Body

      "Building project:"
      .\node_modules\.bin\yarn run build | Render-Body
    displayName: "Build"
  - template: "../shared/publish-working-directory.yml"
# TODO Test
# Deploy
- job: "Deploy"
  dependsOn:
  - "Build"
  steps:
  - checkout: "none"
  - template: "../shared/download-working-directory.yml"
  - template: "../shared/changelog-versioning.yml"
    parameters:
      changelogPath: ${{parameters.changelogPath}}
      versionHeaderPattern: ${{parameters.versionHeaderPattern}}
  - template: set-npmrc.yml
    parameters:
      endpoint: ${{parameters.npmPublishEndpoint}}
      pat: ${{parameters.npmPublishPat}}
  - powershell: |
      function Render-Body { $input | foreach{@{value=$_}} | Format-Table -Property @{Expression={" "}},value -HideTableHeader -wrap}

      "Publishing package:"
      .\node_modules\.bin\yarn publish --no-git-tag-version --new-version $env:VERSION | Render-Body

      if($lastExitCode -ne 0) {
        $packageJson = get-content package.json | convertfrom-json
        $packageVersions = (.\node_modules\.bin\yarn info $packageJson.name versions -s --json | convertfrom-json).data

        # If error occurred because package already exists, allow pipeline to continue
        if($packageVersions -contains $env:VERSION){
          "$($packageJson.name)@$env:VERSION already exists..."
          exit 0
        }else{
          throw "An unexpected error occurred while attempting to publish the package. If it was an intermittent issue, do a manual rebuild of the same commit ($env:BUILD_SOURCEVERSION). Otherwise, rectify the issue and merge the changes into master to trigger a CI build."
        }
      }
    displayName: "Publish"
    condition: and(succeeded(), ne(variables['version'], '')) # If previous tasks succeeded and a non empty version variable exists
  - template: "../shared/tag-commit.yml"
    parameters:
      githubPat: ${{parameters.githubPat}}