parameters:
  changelogPath: "CHANGELOG.md"
  releaseVersionHeaderPattern: '^##[ \t]*\[(\d+\.\d+\.\d+[0-9A-Za-z-.]*)\]'
  unreleasedVersionHeaderPattern: '^##[ \t]*\[Unreleased[ \t]*\((\d+\.\d+\.\d+[0-9A-Za-z-.]*)\)\]'
  npmInstallEndpoint: ""
  npmInstallPat: ""
  npmReleasePublishEndpoint: ""
  npmReleasePublishPat: "$(npmReleasePublishPat)"
  npmCiPublishEndpoint: ""
  npmCiPublishPat: "$(npmCiPublishPat)"
  githubPat: "$(githubPat)"

jobs:
# Build
- job: "NpmBuild"
  pool:
    vmImage: "vs2017-win2016"
  steps:
  - ${{if ne(parameters.npmInstallEndpoint, '')}}:
    - template: set-npmrc.yml
      parameters:
        endpoint: ${{parameters.npmInstallEndpoint}}
        pat: ${{parameters.npmInstallPat}}
  - powershell: |
      function Render-Body { $input | foreach{@{value=$_}} | Format-Table -Property @{Expression={" "}},value -HideTableHeader -wrap}

      # Can't use chocolatey, the installation script errors out
      "Installing Yarn:"      
      npm install yarn@1.12.3 --save-dev | Render-Body 
      if($lastExitCode -ne 0) {
        throw "An unexpected error occurred while attempting to install yarn. If it was an intermittent issue, do a manual rebuild of the same commit."
      }
      remove-item package-lock.json

      "Restoring dependencies:"
      .\node_modules\.bin\yarn install | Render-Body
      if($lastExitCode -ne 0) {
        throw "An unexpected error occurred while attempting to restore dependencies. Ensure that package.json is properly configured. If it was an intermittent issue, do a manual rebuild of the same commit."
      }

      "Building project:"
      .\node_modules\.bin\yarn run build | Render-Body
      if($lastExitCode -ne 0) {
        throw "An unexpected error occurred while attempting to build the project. Ensure that the build script in package.json is valid. If it was an intermittent issue, do a manual rebuild of the same commit."
      }
    displayName: "Build"
  - template: "../shared/publish-working-directory.yml"
# TODO Test
# Deploy
- job: "NpmDeploy"
  dependsOn:
  - "NpmBuild"
  steps:
  - checkout: "none"
  - template: "../shared/download-working-directory.yml"
  - template: "../shared/find-new-version.yml"
    parameters:
      changelogPath: ${{parameters.changelogPath}}
      releaseVersionHeaderPattern: ${{parameters.releaseVersionHeaderPattern}}
      unreleasedVersionHeaderPattern: ${{parameters.unreleasedVersionHeaderPattern}}
  - powershell: |
      $npmPublishEndpoint = if($env:NEWVERSIONISRELEASE){"${{parameters.npmReleasePublishEndpoint}}"}else{"${{parameters.npmCiPublishEndpoint}}"}
      $npmPublishPat = if($env:NEWVERSIONISRELEASE){"${{parameters.npmReleasePublishPat}}"}else{"${{parameters.npmCiPublishPat}}"}
      
      write-host "##vso[task.setvariable variable=npmPublishEndpoint]$npmPublishEndpoint"
      write-host "##vso[task.setvariable variable=npmPublishPat]$npmPublishPat"
    displayName: "Set publish endpoint"
    condition: and(succeeded(), ne(variables['newVersion'], ''))
  # TODO no way to define a runtime condition for templates?
  - template: set-npmrc.yml
    parameters:
      endpoint: "$env:NPMPUBLISHENDPOINT"
      pat: "$env:NPMPUBLISHPAT"
  - powershell: |
      function Render-Body { $input | foreach{@{value=$_}} | Format-Table -Property @{Expression={" "}},value -HideTableHeader -wrap}

      "Publishing package:"
      .\node_modules\.bin\yarn publish --no-git-tag-version --new-version $env:NEWVERSION | Render-Body

      if($lastExitCode -ne 0) {
        $packageJson = get-content package.json | convertfrom-json
        $packageVersions = (.\node_modules\.bin\yarn info $packageJson.name versions -s --json | convertfrom-json).data

        # If error occurred because package already exists, allow pipeline to continue
        if($packageVersions -contains $env:NEWVERSION){
          "$($packageJson.name)@$env:NEWVERSION already exists..."
          exit 0
        }else{
          throw "An unexpected error occurred while attempting to publish the package. If it was an intermittent issue, do a manual rebuild of the same commit ($env:BUILD_SOURCEVERSION). Otherwise, rectify the issue and merge the changes into master to trigger a CI build."
        }
      }
    displayName: "Publish"
    condition: and(succeeded(), ne(variables['newVersion'], '')) # If previous tasks succeeded and a non empty version variable exists
  - template: "../shared/tag-commit.yml"
    parameters:
      githubPat: ${{parameters.githubPat}}